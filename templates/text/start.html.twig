{% extends 'base.html.twig' %}

{% block title %}
	{% trans %}Text step{% endtrans %}
{% endblock %}

{% block body %}
	<p id="timer">{% trans %}Remaining time{% endtrans %}</p>
    {{ form(formStart) }}

    {% if waiting == 1 %}
		<p>{% trans %}Waiting for other players{% endtrans %}</p>
	{% endif %}

    <script type="text/javascript">
		// Set the date we're counting down to
		var countDownDate = new Date().getTime()+(10*1000);
		const music = new Audio('{{ url('index') }}/sound/bips.mp3');

		// Update the count down every 1 second
		var x = setInterval(function() {
			// Get today's date and time
  			var now = new Date().getTime();

			// Find the distance between now and the count down date
  			var distance = countDownDate - now;

			// Time in seconds
			var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
			var seconds = Math.floor((distance % (1000 * 60)) / 1000);

			// Display the result in the element with id="timer"
			document.getElementById("timer").innerHTML = minutes + "m " + seconds + "s ";
			console.log(distance)
			
			// Play a sound when there is less than 4 sec
			if (distance < 3000) {
				music.play()
				music.loop = false
			}
			// If the count down is finished, validate the form
			if (distance < 0) {
				clearInterval(x)
				document.getElementById("timer").innerHTML = "STOP"
				document.form.submit()
			}
		}, 1000);

		// SSE
		// Mercure hub url
		const url = new URL('{{ mercure_hub }}')

		// Search parameters 
		url.searchParams.append('topic', '{{ mercure_host }}start/{{ game_id }}')
		const eventSource = new EventSource(url);

		// The callback will be called every time an update is published
		eventSource.onmessage = e => {
		//	console.log(e); // do something with the payload
			let data = JSON.parse(e.data)
			if(data.subject == 'draw'){
                window.location.replace('{{ mercure_host }}drawing/{{ game_id }}')
			}
		}
	</script>
{% endblock %}
